generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                   @id    @default(autoincrement()) // ID: 整数型、主キー、自動増分
  email                    String                @unique // メールアドレス: 文字列型、ユニーク
  password                 String // パスワード: 文字列型
  hash                     String? // ハッシュ値: 文字列型、Null許容
  username                 String? // ユーザー名: 文字列型、Null許容
  year                     Int? // 年: 整数型、Null許容
  class                    Int? // クラス: 整数型、Null許容
  birth                    DateTime?             @db.Date // 誕生日: 日付型、Null許容
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  level                    Int                   @default(1) //アカウントレベル
  xp                       Int                   @default(0) //総経験値
  icon                     String? //アイコン
  title                    String? //称号
  progresses               UserSubjectProgress[] // このユーザーの科目別進捗のリスト
  continuouslogin          Int?
　totallogin               Int? @default(0)
  lastlogin                DateTime?
  // UserモデルとUserAnswerモデルが1対多の関係であることを示します。
  answers                  UserAnswer[]
  Answer_Algorithm         Answer_Algorithm[]
  Answerd_Genre_Table      Answerd_Genre_Table[]
  Groups_User              Groups_User[]
  Status_Kohaku            Status_Kohaku[]
  createdProblems          ProgrammingProblem[] @relation("ProblemCreator")
  posts Post[]
}

// グループ内の投稿・お知らせを保存するモデル
model Post {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- リレーション ---
  groupId   Int    // どのグループへの投稿か
  group     Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  authorId  Int    // 誰が投稿したか
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model UserAnswer {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  answer     String
  isCorrect  Boolean
  answeredAt DateTime @default(now())

  // --- リレーション定義 ---
  user     User      @relation(fields: [userId], references: [id])
  question Questions @relation(fields: [questionId], references: [id])
}

//科目テーブル
model Subject {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  userProgresses      UserSubjectProgress[] // この科目を学習しているユーザーの進捗リスト
  Questions_Algorithm Questions_Algorithm[]
}

model Language {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  Questions_Algorithm Questions_Algorithm[]
  Questions           Questions[]
}

model Answer_Algorithm {
  id         Int     @id @default(autoincrement())
  questionId Int
  userId     Int
  symbol     String
  isCorrect  Boolean
  text       String? @db.Text

  // --- リレーション定義 ---
  user     User                @relation(fields: [userId], references: [id])
  question Questions_Algorithm @relation(fields: [questionId], references: [id])
}

model Questions_Algorithm {
  id              Int                @id @default(autoincrement())
  title             String
  description       String?
  explanation       String?
  programLines      String?
  answerOptions     String?
  correctAnswer     String?
  language_id     Int
  initialVariable Json
  logictype       String
  options         Json
  image           String?
  subjectId       Int
  difficultyId    Int
  answers         Answer_Algorithm[]

  // --- リレーション定義 ---
  subject    Subject    @relation(fields: [subjectId], references: [id])
  difficulty Difficulty @relation(fields: [difficultyId], references: [id])
  language   Language   @relation(fields: [language_id], references: [id])
}

model Questions {
  id           Int       @id @default(autoincrement())
  language_id  Int
  genre_id     Int
  title        String
  genreid      Int
  question     String
  answerid     Int
  term         String
  year         DateTime?
  explain      String?
  image        String?
  difficultyId Int

  // --- リレーション定義 ---
  genre      Genre        @relation(fields: [genre_id], references: [id])
  difficulty Difficulty   @relation(fields: [difficultyId], references: [id])
  language   Language     @relation(fields: [language_id], references: [id])
  answer     UserAnswer[]
  Answers    Answers[]
}

/// プログラミング問題の情報を格納するモデル 
model ProgrammingProblem {
  id                Int      @id @default(autoincrement())
  
  // --- 基本情報 ---
  title             String                                 // タイトル
  problemType       String   @default("コーディング問題")    // 問題タイプ
  difficulty        Int      @default(4)                   // 難易度 (1-10)
  timeLimit         Int      @default(10)                  // 制限時間 (分)
  category          String   @default("プログラミング基礎")   // カテゴリ
  topic             String   @default("標準入力")           // トピック
  tags              String   @default("[]")                // タグ (JSON文字列)
  
  // --- 問題内容 ---
  description       String   @db.Text                      // 問題文
  codeTemplate      String   @db.Text @default("")         // コードテンプレート
  
  // --- 公開設定 ---
  isPublic          Boolean  @default(false)               // 公開フラグ
  allowTestCaseView Boolean  @default(false)               // テストケース表示許可
  isDraft           Boolean  @default(true)                // 下書きフラグ
  isPublished       Boolean  @default(false)               // 公開済みフラグ
  
  // --- 作成者情報 ---
  createdBy         Int?                                   // 作成者ID
  creator           User?    @relation("ProblemCreator", fields: [createdBy], references: [id])
  
  // --- タイムスタンプ ---
  createdAt         DateTime @default(now())               // 作成日時
  updatedAt         DateTime @updatedAt                    // 更新日時
  
  // --- リレーション ---
  sampleCases       SampleCase[]                           // サンプルケース
  testCases         TestCase[]                             // テストケース
  files             ProblemFile[]                          // 添付ファイル
}

/// サンプルケースモデル
model SampleCase {
  id                Int      @id @default(autoincrement())
  problemId         Int                                    // 問題ID
  input             String   @db.Text                      // 入力
  expectedOutput    String   @db.Text                      // 期待される出力
  description       String   @db.Text @default("")         // 説明
  order             Int      @default(0)                   // 表示順序
  
  // --- リレーション ---
  problem           ProgrammingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  // --- インデックス ---
  @@index([problemId])
}

/// テストケースモデル
model TestCase {
  id                Int      @id @default(autoincrement())
  problemId         Int                                    // 問題ID
  name              String   @default("ケース1")            // テストケース名
  input             String   @db.Text                      // 入力
  expectedOutput    String   @db.Text                      // 期待される出力
  description       String   @db.Text @default("")         // 説明
  order             Int      @default(0)                   // 表示順序
  
  // --- リレーション ---
  problem           ProgrammingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  // --- インデックス ---
  @@index([problemId])
}

/// 問題添付ファイルモデル
model ProblemFile {
  id                Int      @id @default(autoincrement())
  problemId         Int                                    // 問題ID
  fileName          String                                 // ファイル名
  originalName      String                                 // 元のファイル名
  filePath          String                                 // ファイルパス
  fileSize          Int                                    // ファイルサイズ (bytes)
  mimeType          String                                 // MIMEタイプ
  uploadedAt        DateTime @default(now())               // アップロード日時
  
  // --- リレーション ---
  problem           ProgrammingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  // --- インデックス ---
  @@index([problemId])
}

model Genre {
  id        Int         @id @default(autoincrement())
  genre     String      @unique
  Questions Questions[]
}

model Answerd_Genre_Table {
  id                Int @id @default(autoincrement())
  user_id           Int
  Answer_IT         Int
  Answer_Basic_A    Int
  Answer_Basic_B    Int
  Answer_Applied_Am Int
  Answer_Applied_Pm Int
  Answer_Info_Test  Int
  Answer_Python     Int
  Answer_Java       Int

  user User @relation(fields: [user_id], references: [id])
}

model Coding {
  id          Int    @id @default(autoincrement())
  title       String
  question    String
  answer      String
  sample_case String
  testcase_id Int
  image       String
  explain     String
  difficulty  String
  xpid        Int
}

model Test_Case {
  id       Int    @id @default(autoincrement())
  testcase String
}

model Answers {
  id          Int     @id @default(autoincrement())
  question_id Int
  answer      String
  isCorrect   Boolean

  // --- リレーション定義 ---
  question Questions @relation(fields: [question_id], references: [id])
}

model User_Answer_History {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  answerd_genre_id    Int
  user_selectedanswer String
  isCorrect           Boolean
  term                String
  year                DateTime
  Answer_Timestamp    DateTime
}

model UserSubjectProgress {
  level Int @default(1) //科目ごとのレベル
  xp    Int @default(0) //科目ごとの経験値

  // --- リレーションのためのフィールド ---
  user_id    Int
  subject_id Int

  // --- リレーション定義 ---
  // この進捗がどのユーザーのものかを示す
  user    User    @relation(fields: [user_id], references: [id])
  // この進捗がどの科目のものかを示す
  subject Subject @relation(fields: [subject_id], references: [id])

  // --- 複合主キー ---
  // userIdとsubjectIdの組み合わせがユニークであることを保証する
  // (一人のユーザーが同じ科目で複数の進捗を持つことはないため)
  @@id([user_id, subject_id])
}

// 難易度と獲得XPのマスタテーブル
model Difficulty {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique // 難易度名 (例: "Easy", "Normal", "Hard")
  xp                  Int // この難易度で得られる経験値
  Questions_Algorithm Questions_Algorithm[]
  Questions           Questions[]
}

model Groups {
  id          Int           @id @default(autoincrement())
  hashedId    String        @unique @default(cuid())
  groupname   String        @unique
  body        String        @db.Text
  Groups_User Groups_User[]
  Assignment  Assignment[]
  posts Post[]
}

model Groups_User {
  id        Int     @id @default(autoincrement())
  user_id   Int
  group_id  Int
  admin_flg Boolean
  // --- リレーション定義 ---
  user      User    @relation(fields: [user_id], references: [id])
  group     Groups  @relation(fields: [group_id], references: [id])
}

model Submission_Files_Table {
  id           Int      @id @default(autoincrement())
  submissionid Int
  filename     String
  filepath     String
  filesize     Int
  uploaded_at  DateTime @default(now())
}

model Assignment {
  id          Int      @id @default(autoincrement())
  groupid     Int
  title       String
  description String
  due_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // --- リレーション定義 ---
  group       Groups        @relation(fields: [groupid], references: [id])
  Submissions Submissions[]
}

model Submissions {
  id            Int      @id @default(autoincrement())
  assignment_id Int
  userid        Int
  description   String
  status        String
  codingid      Int
  submitted_at  DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  assignment Assignment @relation(fields: [assignment_id], references: [id])
}

model Status_Kohaku {
  id          Int    @id @default(autoincrement())
  user_id     Int
  status      String
  hungerlevel Int

  user User @relation(fields: [user_id], references: [id])
}

model Degree {
  id     Int    @id @default(autoincrement())
  degree String @unique
}

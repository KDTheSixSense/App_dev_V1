generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                     @id @default(autoincrement()) // ID: 整数型、主キー、自動増分
  email                      String                  @unique // メールアドレス: 文字列型、ユニーク
  password                   String // パスワード: 文字列型
  hash                       String? // ハッシュ値: 文字列型、Null許容
  username                   String? // ユーザー名: 文字列型、Null許容
  year                       Int? // 年: 整数型、Null許容
  class                      Int? // クラス: 整数型、Null許容
  birth                      DateTime?               @db.Date // 誕生日: 日付型、Null許容
  resetPasswordToken         String?
  resetPasswordTokenExpiry   DateTime?
  level                      Int                     @default(1) //アカウントレベル
  xp                         Int                     @default(0) //総経験値
  progresses                 UserSubjectProgress[] // このユーザーの科目別進捗のリスト
  answers                    UserAnswer[] // このユーザーの解答履歴のリスト
}

/// 問題の情報をすべて格納するモデル
model Problem {
  id                Int      @id @default(autoincrement()) /// 問題ID: データベース内で一意の番号が自動で振られます
  // --- 問題の基本情報 (日本語/英語) ---
  title_ja         String
  title_en         String
  description_ja   String   @db.Text
  description_en   String   @db.Text

  // --- 解答関連 ---
  answerOptions_ja Json
  answerOptions_en Json
  correctAnswer    String

  // --- 解説 ---
  explanation_ja   String   @db.Text
  explanation_en   String   @db.Text

  // --- プログラム ---
  programLines_ja  String[]
  programLines_en  String[]

  // --- リレーション定義 ---
  // この言語情報セットを使用する問題のリスト
  questions        Question[]
}

/// 問題のコアロジックや設定を格納するモデル
model Question {
  id               Int      @id @default(autoincrement())
  // トレース開始時の変数の初期状態
  initialVariables Json
  // トレースのロジックを識別するための種類名
  logicType        String
  // 特定の問題で使う追加オプション
  options          Json?
  // 画像のパス
  image            String?

  // --- リレーション定義 ---
  // 言語情報への参照
  languageId       Int
  language         Language @relation(fields: [languageId], references: [id])

  // 難易度と獲得XPへの参照
  difficultyId     Int
  difficulty       Difficulty @relation(fields: [difficultyId], references: [id])

  // この問題に対する全ユーザーの解答リスト
  answers          UserAnswer[]
}

/// ユーザーごとの問題の解答状況を記録するモデル
model UserAnswer {
  id                 Int      @id @default(autoincrement())
  // --- どのユーザーが、どの問題を解答したか ---
  userId             Int?
  questionId         Int? // ProblemモデルからQuestionモデルへの変更を反映
  // --- 解答の詳細 ---
  userSelectedAnswer String
  isCorrect          Boolean
  answeredAt         DateTime @default(now())

  // --- リレーション定義 ---
  user               User?     @relation(fields: [userId], references: [id])
  question           Question? @relation(fields: [questionId], references: [id]) // ProblemモデルからQuestionモデルへの変更を反映
}

//科目テーブル
model Subject {
  id             Int                     @id @default(autoincrement())
  name           String                  @unique
  description    String?
  userProgresses UserSubjectProgress[] // この科目を学習しているユーザーの進捗リスト
}

model UserSubjectProgress {
  level     Int @default(1) //科目ごとのレベル
  xp        Int @default(0) //科目ごとの経験値
  // --- リレーションのためのフィールド ---
  userId    Int
  subjectId Int
  // --- リレーション定義 ---
  user      User    @relation(fields: [userId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  // --- 複合主キー ---
  @@id([userId, subjectId])
}

// 難易度と獲得XPのマスタテーブル
model Difficulty {
  id   Int    @id @default(autoincrement())
  name String @unique // 難易度名 (例: "Easy", "Normal", "Hard")
  xp   Int    // この難易度で得られる経験値

  // --- リレーション定義 ---
  // この難易度に属する問題のリスト
  questions Question[]
}
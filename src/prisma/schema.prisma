generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        Int      @id @default(autoincrement()) // ID: 整数型、主キー、自動増分
  email     String   @unique                       // メールアドレス: 文字列型、ユニーク
  password  String                               // パスワード: 文字列型
  hash      String?                              // ハッシュ値: 文字列型、Null許容
  username  String?                              // ユーザー名: 文字列型、Null許容
  year      Int?                                 // 年: 整数型、Null許容
  class     Int?                                 // クラス: 整数型、Null許容
  birth     DateTime? @db.Date                    // 誕生日: 日付型、Null許容
  resetPasswordToken         String?
  resetPasswordTokenExpiry DateTime?
  level     Int @default(1)                     //アカウントレベル
  xp        Int @default(0)                     //総経験値
  icon      String?                             // アイコンURL: 文字列型、Null許容

  progresses UserSubjectProgress[] // このユーザーの科目別進捗のリスト
  // UserモデルとUserAnswerモデルが1対多の関係であることを示します。
  answers   UserAnswer[]
}

/// 問題の情報をすべて格納するモデル
model Problem {
  id                Int      @id @default(autoincrement()) /// 問題ID: データベース内で一意の番号が自動で振られます
  // --- 問題の基本情報 (日本語/英語) ---
  title_ja          String   /// タイトル (日本語)
  title_en          String   /// タイトル (英語)
  description_ja    String   @db.Text /// 問題文 (日本語)。長文になる可能性があるのでText型を指定
  description_en    String   @db.Text /// 問題文 (英語)

  // --- 解答関連 ---
  // 解答選択肢は [{label:"ア", value:"..."}, ...] のような複雑な構造のため、
  // JSON型で柔軟に格納するのが便利です。
  answerOptions_ja  Json
  answerOptions_en  Json
  correctAnswer     String   /// 正解の値 (例: "3,2", "ウ")

  // --- 解説 ---
  explanation_ja    String   @db.Text /// 解説文 (日本語)
  explanation_en    String   @db.Text /// 解説文 (英語)
  
  // --- プログラムとトレース関連 ---
  // `String[]` とすることで、文字列の配列をそのまま格納できます (PostgreSQLの機能)。
  programLines_ja   String[] /// 擬似言語プログラムの各行 (日本語)
  programLines_en   String[] /// 擬似言語プログラムの各行 (英語)

  // トレース開始時の変数の初期状態をJSONで格納します (例: { "x": null, "y": null })
  initialVariables  Json     
  
  // ★最重要★ トレースのロジックを識別するための「種類名」
  // この名前を元に、プログラム側で対応するトレース関数を呼び出します。
  // (例: "VARIABLE_SWAP", "FIZZ_BUZZ", "ARRAY_SUM")
  logicType         String
  
  // 特定の問題で使う追加オプション (例: FizzBuzzのプリセット値)
  // `?` をつけることで、このカラムは無くても良い（オプショナル）ことを示します。
  options           Json?

  // --- リレーション定義 ---
  // この問題に対する全ユーザーの解答リスト。UserAnswerモデルと1対多の関係。
  answers           UserAnswer[]
}


/// ユーザーごとの問題の解答状況を記録するモデル（中間テーブル）
/// これにより、「誰が」「どの問題を」「いつ、どう解答したか」をすべて記録できます。
model UserAnswer {
  id                 Int      @id @default(autoincrement()) /// 解答履歴ID

  // --- どのユーザーが、どの問題を解答したか ---
  userId             Int?      /// UserモデルのIDと紐づく外部キー
  problemId          Int?      /// ProblemモデルのIDと紐づく外部キー
  
  // --- 解答の詳細 ---
  userSelectedAnswer String   /// ユーザーが実際に選択した解答の値
  isCorrect          Boolean  /// その解答が正解だったかどうか (true/false)
  answeredAt         DateTime @default(now()) /// 解答した日時（自動で現在時刻が記録されます）

  // --- リレーション定義 ---
  // `@relation` は、どのカラムがどのテーブルのどのカラムと関連しているかをPrismaに教えます。
  user               User?     @relation(fields: [userId], references: [id])
  problem            Problem?  @relation(fields: [problemId], references: [id])

  // --- 制約 ---
  // 同じユーザーが同じ問題に複数回解答した履歴をすべて残す想定です。
  // もし最新の解答状況だけを記録したい場合は `@@unique([userId, problemId])` を追加します。
}

//科目テーブル
model Subject {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?

  userProgresses UserSubjectProgress[] // この科目を学習しているユーザーの進捗リスト
}

model UserSubjectProgress {
  level Int @default(1)                     //科目ごとのレベル
  xp    Int @default(0)                     //科目ごとの経験値

// --- リレーションのためのフィールド ---
  userId    Int
  subjectId Int

  // --- リレーション定義 ---
  // この進捗がどのユーザーのものかを示す
  user    User    @relation(fields: [userId], references: [id])
  // この進捗がどの科目のものかを示す
  subject Subject @relation(fields: [subjectId], references: [id])

  // --- 複合主キー ---
  // userIdとsubjectIdの組み合わせがユニークであることを保証する
  // (一人のユーザーが同じ科目で複数の進捗を持つことはないため)
  @@id([userId, subjectId])
}

// 難易度と獲得XPのマスタテーブル
model Difficulty {
  id   Int    @id @default(autoincrement())
  name String @unique // 難易度名 (例: "Easy", "Normal", "Hard")
  xp   Int    // この難易度で得られる経験値
}